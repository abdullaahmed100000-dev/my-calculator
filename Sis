# الجزء الأول - Flask + قاعدة البيانات + الموديلات + المصروفات + النسخة الاحتياطية + سلة المحذوفات
# الملف الرئيسي: pos_desktop.py
import os
import shutil
import zipfile
import threading
import time
from datetime import datetime, timedelta, date
from flask import Flask, render_template_string, request, redirect, url_for, jsonify, flash
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import extract
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QMessageBox
from PyQt5.QtWebEngineWidgets import QWebEngineView
import sys
# إنشاء التطبيق Flask
app = Flask(__name__)
app.secret_key = 'pos_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///pos.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
# ===========================================
# النماذج Models
# ===========================================
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    price = db.Column(db.Float)
    quantity = db.Column(db.Integer)
    added_date = db.Column(db.Date, default=date.today)
    deleted = db.Column(db.Boolean, default=False)
class Supplier(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    phone = db.Column(db.String(20))
    address = db.Column(db.String(200))
    deleted = db.Column(db.Boolean, default=False)
class Sale(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_name = db.Column(db.String(100))
    quantity = db.Column(db.Integer)
    total = db.Column(db.Float)
    date = db.Column(db.Date, default=date.today)
    deleted = db.Column(db.Boolean, default=False)
class Expense(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(200))
    amount = db.Column(db.Float)
    date = db.Column(db.Date, default=date.today)
    deleted = db.Column(db.Boolean, default=False)
db.create_all()
# ===========================================
# سلة المحذوفات Recycle Bin (تنظيف تلقائي كل 7 أيام)
# ===========================================
def clean_recycle_bin():
    while True:
        time.sleep(86400 * 7)  # كل 7 أيام
        with app.app_context():
            for model in [Product, Supplier, Sale, Expense]:
                deleted_items = model.query.filter_by(deleted=True).all()
                for item in deleted_items:
                    db.session.delete(item)
            db.session.commit()
clean_thread = threading.Thread(target=clean_recycle_bin, daemon=True)
clean_thread.start()
# ===========================================
# النسخ الاحتياطي Backup & Restore
# ===========================================
BACKUP_FOLDER = "backups"
if not os.path.exists(BACKUP_FOLDER):
    os.makedirs(BACKUP_FOLDER)
def create_backup():
    backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
    backup_path = os.path.join(BACKUP_FOLDER, backup_filename)
    with zipfile.ZipFile(backup_path, 'w') as zipf:
        zipf.write('pos.db')
    return backup_filename
def restore_backup(backup_filename):
    backup_path = os.path.join(BACKUP_FOLDER, backup_filename)
    with zipfile.ZipFile(backup_path, 'r') as zipf:
        zipf.extractall()
    return True
# ===========================================
# صفحات Flask
# ===========================================
@app.route('/')
def index():
    return render_template_string("""
        <h2>نظام المبيعات - الصفحة الرئيسية</h2>
        <a href="/sales">📊 المبيعات</a><br>
        <a href="/expenses">💸 المصروفات</a><br>
        <a href="/products">📦 المنتجات</a><br>
        <a href="/suppliers">👥 الموردين</a><br>
        <a href="/recycle_bin">🗑️ سلة المحذوفات</a><br>
        <a href="/backup">💾 إنشاء نسخة احتياطية</a><br>
        <a href="/restore">🔁 استرجاع نسخة احتياطية</a><br>
    """)
# ===========================================
# إدارة المصروفات (إضافة / تعديل / حذف)
# ===========================================
@app.route('/expenses', methods=['GET', 'POST'])
def manage_expenses():
    if request.method == 'POST':
        desc = request.form['description']
        amount = float(request.form['amount'])
        exp = Expense(description=desc, amount=amount)
        db.session.add(exp)
        db.session.commit()
        flash('تمت إضافة المصروف بنجاح')
        return redirect(url_for('manage_expenses'))
    expenses = Expense.query.filter_by(deleted=False).all()
    return render_template_string("""
        <h2>إدارة المصروفات</h2>
        <form method="POST">
            الوصف: <input name="description">
            المبلغ: <input name="amount" type="number" step="0.01">
            <button type="submit">إضافة</button>
        </form>
        <br>
        <table border="1">
            <tr><th>الوصف</th><th>المبلغ</th><th>تاريخ</th><th>تحكم</th></tr>
            {% for e in expenses %}
                <tr>
                    <td>{{ e.description }}</td>
                    <td>{{ e.amount }}</td>
                    <td>{{ e.date }}</td>
                    <td>
                        <a href="/edit_expense/{{e.id}}">✏️ تعديل</a> | 
                        <a href="/delete_expense/{{e.id}}">🗑️ حذف</a>
                    </td>
                </tr>
            {% endfor %}
        </table>
        <br><a href="/">🔙 رجوع</a>
    """, expenses=expenses)
@app.route('/edit_expense/<int:id>', methods=['GET', 'POST'])
def edit_expense(id):
    exp = Expense.query.get_or_404(id)
    if request.method == 'POST':
        exp.description = request.form['description']
        exp.amount = float(request.form['amount'])
        db.session.commit()
        flash('تم تعديل المصروف بنجاح')
        return redirect(url_for('manage_expenses'))
    return render_template_string("""
        <h2>تعديل المصروف</h2>
        <form method="POST">
            الوصف: <input name="description" value="{{exp.description}}">
            المبلغ: <input name="amount" type="number" value="{{exp.amount}}">
            <button type="submit">💾 حفظ</button>
        </form>
    """, exp=exp)
@app.route('/delete_expense/<int:id>')
def delete_expense(id):
    exp = Expense.query.get_or_404(id)
    exp.deleted = True
    db.session.commit()
    flash('تم نقل المصروف إلى سلة المحذوفات')
    return redirect(url_for('manage_expenses'))
# نهاية الجزء الأول - تابع في الجزء الثاني 👇
# الجزء الثاني - إدارة المنتجات والموردين والمبيعات + سلة المحذوفات + النسخ الاحتياطي
# ===========================================
# إدارة المنتجات
# ===========================================
@app.route('/products', methods=['GET', 'POST'])
def manage_products():
    if request.method == 'POST':
        name = request.form['name']
        price = float(request.form['price'])
        qty = int(request.form['quantity'])
        p = Product(name=name, price=price, quantity=qty)
        db.session.add(p)
        db.session.commit()
        flash('تمت إضافة المنتج بنجاح')
        return redirect(url_for('manage_products'))
    products = Product.query.filter_by(deleted=False).all()
    return render_template_string("""
        <h2>📦 إدارة المنتجات</h2>
        <form method="POST">
            الاسم: <input name="name">
            السعر: <input name="price" type="number" step="0.01">
            الكمية: <input name="quantity" type="number">
            <button type="submit">إضافة</button>
        </form>
        <br>
        <table border="1">
            <tr><th>الاسم</th><th>السعر</th><th>الكمية</th><th>تاريخ الإضافة</th><th>تحكم</th></tr>
            {% for p in products %}
                <tr>
                    <td>{{p.name}}</td>
                    <td>{{p.price}}</td>
                    <td>{{p.quantity}}</td>
                    <td>{{p.added_date}}</td>
                    <td>
                        <a href="/edit_product/{{p.id}}">✏️ تعديل</a> | 
                        <a href="/delete_product/{{p.id}}">🗑️ حذف</a>
                    </td>
                </tr>
            {% endfor %}
        </table>
        <br><a href="/">🔙 رجوع</a>
    """, products=products)
@app.route('/edit_product/<int:id>', methods=['GET', 'POST'])
def edit_product(id):
    p = Product.query.get_or_404(id)
    if request.method == 'POST':
        p.name = request.form['name']
        p.price = float(request.form['price'])
        p.quantity = int(request.form['quantity'])
        db.session.commit()
        flash('تم تعديل المنتج بنجاح')
        return redirect(url_for('manage_products'))
    return render_template_string("""
        <h2>تعديل المنتج</h2>
        <form method="POST">
            الاسم: <input name="name" value="{{p.name}}">
            السعر: <input name="price" type="number" value="{{p.price}}">
            الكمية: <input name="quantity" type="number" value="{{p.quantity}}">
            <button type="submit">💾 حفظ</button>
        </form>
    """, p=p)
@app.route('/delete_product/<int:id>')
def delete_product(id):
    p = Product.query.get_or_404(id)
    p.deleted = True
    db.session.commit()
    flash('تم نقل المنتج إلى سلة المحذوفات')
    return redirect(url_for('manage_products'))
# ===========================================
# الموردين
# ===========================================
@app.route('/suppliers', methods=['GET', 'POST'])
def manage_suppliers():
    if request.method == 'POST':
        name = request.form['name']
        phone = request.form['phone']
        address = request.form['address']
        s = Supplier(name=name, phone=phone, address=address)
        db.session.add(s)
        db.session.commit()
        flash('تمت إضافة المورد بنجاح')
        return redirect(url_for('manage_suppliers'))
    suppliers = Supplier.query.filter_by(deleted=False).all()
    return render_template_string("""
        <h2>👥 الموردين</h2>
        <form method="POST">
            الاسم: <input name="name">
            الهاتف: <input name="phone">
            العنوان: <input name="address">
            <button type="submit">إضافة</button>
        </form>
        <br>
        <table border="1">
            <tr><th>الاسم</th><th>الهاتف</th><th>العنوان</th><th>تحكم</th></tr>
            {% for s in suppliers %}
                <tr>
                    <td>{{s.name}}</td>
                    <td>{{s.phone}}</td>
                    <td>{{s.address}}</td>
                    <td>
                        <a href="/delete_supplier/{{s.id}}">🗑️ حذف</a>
                    </td>
                </tr>
            {% endfor %}
        </table>
        <br><a href="/">🔙 رجوع</a>
    """, suppliers=suppliers)
@app.route('/delete_supplier/<int:id>')
def delete_supplier(id):
    s = Supplier.query.get_or_404(id)
    s.deleted = True
    db.session.commit()
    flash('تم نقل المورد إلى سلة المحذوفات')
    return redirect(url_for('manage_suppliers'))
# ===========================================
# المبيعات اليومية والشهرية
# ===========================================
@app.route('/sales', methods=['GET', 'POST'])
def sales_page():
    if request.method == 'POST':
        pname = request.form['product_name']
        qty = int(request.form['quantity'])
        product = Product.query.filter_by(name=pname, deleted=False).first()
        if product and product.quantity >= qty:
            total = qty * product.price
            product.quantity -= qty
            sale = Sale(product_name=pname, quantity=qty, total=total)
            db.session.add(sale)
            db.session.commit()
            flash('✅ تمت عملية البيع بنجاح')
        else:
            flash('❌ الكمية غير متوفرة')
        return redirect(url_for('sales_page'))
    today = date.today()
    month_sales = Sale.query.filter(extract('month', Sale.date) == today.month, Sale.deleted == False).all()
    today_sales = Sale.query.filter(Sale.date == today, Sale.deleted == False).all()
    return render_template_string("""
        <h2>📊 إدارة المبيعات</h2>
        <form method="POST">
            المنتج: <input name="product_name">
            الكمية: <input name="quantity" type="number">
            <button type="submit">بيع</button>
        </form>
        <hr>
        <h3>مبيعات اليوم</h3>
        <table border="1">
            <tr><th>المنتج</th><th>الكمية</th><th>الإجمالي</th><th>التاريخ</th></tr>
            {% for s in today_sales %}
                <tr>
                    <td>{{s.product_name}}</td>
                    <td>{{s.quantity}}</td>
                    <td>{{s.total}}</td>
                    <td>{{s.date}}</td>
                </tr>
            {% endfor %}
        </table>
        <h3>مبيعات الشهر</h3>
        <table border="1">
            <tr><th>المنتج</th><th>الكمية</th><th>الإجمالي</th><th>التاريخ</th></tr>
            {% for s in month_sales %}
                <tr>
                    <td>{{s.product_name}}</td>
                    <td>{{s.quantity}}</td>
                    <td>{{s.total}}</td>
                    <td>{{s.date}}</td>
                </tr>
            {% endfor %}
        </table>
        <br><a href="/">🔙 رجوع</a>
    """, today_sales=today_sales, month_sales=month_sales)
# ===========================================
# سلة المحذوفات العامة
# ===========================================
@app.route('/recycle_bin')
def recycle_bin():
    products = Product.query.filter_by(deleted=True).all()
    suppliers = Supplier.query.filter_by(deleted=True).all()
    sales = Sale.query.filter_by(deleted=True).all()
    expenses = Expense.query.filter_by(deleted=True).all()
    return render_template_string("""
        <h2>🗑️ سلة المحذوفات</h2>
        <h3>المنتجات</h3>
        {% for p in products %}
            {{p.name}} - <a href="/restore/product/{{p.id}}">استرجاع</a><br>
        {% endfor %}
        <h3>الموردين</h3>
        {% for s in suppliers %}
            {{s.name}} - <a href="/restore/supplier/{{s.id}}">استرجاع</a><br>
        {% endfor %}
        <h3>المبيعات</h3>
        {% for s in sales %}
            {{s.product_name}} - <a href="/restore/sale/{{s.id}}">استرجاع</a><br>
        {% endfor %}
        <h3>المصروفات</h3>
        {% for e in expenses %}
            {{e.description}} - <a href="/restore/expense/{{e.id}}">استرجاع</a><br>
        {% endfor %}
        <br><a href="/">🔙 رجوع</a>
    """, products=products, suppliers=suppliers, sales=sales, expenses=expenses)
@app.route('/restore/<string:model>/<int:id>')
def restore_item(model, id):
    models = {"product": Product, "supplier": Supplier, "sale": Sale, "expense": Expense}
    if model in models:
        item = models[model].query.get_or_404(id)
        item.deleted = False
        db.session.commit()
        flash("✅ تم استرجاع العنصر بنجاح")
    return redirect(url_for('recycle_bin'))
# نهاية الجزء الثاني - تابع في الجزء الثالث 👇
# ================================
# الجزء الثالث - المنتجات والموردين والمبيعات اليومية/الشهرية
# ================================
# جدول الموردين
class Supplier(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(20))
    address = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
# جدول المنتجات
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    supplier_id = db.Column(db.Integer, db.ForeignKey('supplier.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    supplier = db.relationship('Supplier', backref=db.backref('products', lazy=True))
# المبيعات اليومية
@app.route('/sales/today')
def sales_today():
    today = date.today()
    sales = Sale.query.filter(
        extract('year', Sale.date) == today.year,
        extract('month', Sale.date) == today.month,
        extract('day', Sale.date) == today.day
    ).all()
    return render_template_string("""
    <h2>📅 مبيعات اليوم</h2>
    <ul>
    {% for sale in sales %}
        <li>{{ sale.item_name }} - {{ sale.amount }} جنيه</li>
    {% endfor %}
    </ul>
    <a href="/">🏠 عودة للرئيسية</a>
    """, sales=sales)
# المبيعات الشهرية
@app.route('/sales/month')
def sales_month():
    today = date.today()
    sales = Sale.query.filter(
        extract('year', Sale.date) == today.year,
        extract('month', Sale.date) == today.month
    ).all()
    return render_template_string("""
    <h2>📆 مبيعات الشهر</h2>
    <ul>
    {% for sale in sales %}
        <li>{{ sale.item_name }} - {{ sale.amount }} جنيه</li>
    {% endfor %}
    </ul>
    <a href="/">🏠 عودة للرئيسية</a>
    """, sales=sales)
# صفحة الموردين
@app.route('/suppliers')
def suppliers():
    suppliers = Supplier.query.all()
    return render_template_string("""
    <h2>👨‍🔧 الموردين</h2>
    <a href="/suppliers/add">➕ إضافة مورد</a>
    <ul>
    {% for s in suppliers %}
        <li>{{ s.name }} - {{ s.phone }} - {{ s.address }}</li>
    {% endfor %}
    </ul>
    <a href="/">🏠 عودة للرئيسية</a>
    """, suppliers=suppliers)
@app.route('/suppliers/add', methods=['GET', 'POST'])
def add_supplier():
    if request.method == 'POST':
        name = request.form['name']
        phone = request.form['phone']
        address = request.form['address']
        new_supplier = Supplier(name=name, phone=phone, address=address)
        db.session.add(new_supplier)
        db.session.commit()
        flash("تمت إضافة المورد بنجاح ✅")
        return redirect('/suppliers')
    return render_template_string("""
    <h2>➕ إضافة مورد جديد</h2>
    <form method="POST">
        الاسم: <input type="text" name="name"><br>
        الهاتف: <input type="text" name="phone"><br>
        العنوان: <input type="text" name="address"><br>
        <button type="submit">حفظ</button>
    </form>
    """)
# صفحة المنتجات
@app.route('/products')
def products():
    products = Product.query.all()
    return render_template_string("""
    <h2>📦 المنتجات</h2>
    <a href="/products/add">➕ إضافة منتج</a>
    <ul>
    {% for p in products %}
        <li>{{ p.name }} - {{ p.price }} جنيه 
        <a href="/products/edit/{{p.id}}">✏️ تعديل</a>
        <a href="/products/delete/{{p.id}}">🗑️ حذف</a>
        </li>
    {% endfor %}
    </ul>
    <a href="/">🏠 عودة للرئيسية</a>
    """, products=products)
@app.route('/products/add', methods=['GET', 'POST'])
def add_product():
    suppliers = Supplier.query.all()
    if request.method == 'POST':
        name = request.form['name']
        price = request.form['price']
        supplier_id = request.form.get('supplier_id')
        new_product = Product(name=name, price=price, supplier_id=supplier_id)
        db.session.add(new_product)
        db.session.commit()
        flash("تمت إضافة المنتج بنجاح ✅")
        return redirect('/products')
    return render_template_string("""
    <h2>➕ إضافة منتج جديد</h2>
    <form method="POST">
        الاسم: <input type="text" name="name"><br>
        السعر: <input type="number" step="0.01" name="price"><br>
        المورد:
        <select name="supplier_id">
            {% for s in suppliers %}
                <option value="{{ s.id }}">{{ s.name }}</option>
            {% endfor %}
        </select><br>
        <button type="submit">حفظ</button>
    </form>
    """, suppliers=suppliers)
@app.route('/products/edit/<int:id>', methods=['GET', 'POST'])
def edit_product(id):
    product = Product.query.get_or_404(id)
    if request.method == 'POST':
        product.name = request.form['name']
        product.price = request.form['price']
        db.session.commit()
        flash("تم تعديل المنتج ✅")
        return redirect('/products')
    return render_template_string("""
    <h2>✏️ تعديل المنتج</h2>
    <form method="POST">
        الاسم: <input type="text" name="name" value="{{product.name}}"><br>
        السعر: <input type="number" step="0.01" name="price" value="{{product.price}}"><br>
        <button type="submit">حفظ</button>
    </form>
    """, product=product)
@app.route('/products/delete/<int:id>')
def delete_product(id):
    product = Product.query.get_or_404(id)
    db.session.delete(product)
    db.session.commit()
    flash("تم حذف المنتج ❌")
    return redirect('/products')
# تشغيل السيرفر
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True, host="0.0.0.0", port=5000)
