
# pos_desktop.py
import zipfile
def check_for_updates():

    """
    يبحث عن تحديث في مجلد updates ويحدث الكود تلقائيًا بدون حذف البيانات.
    """
    updates_folder = os.path.join(os.getcwd(), "updates")
    version_file = os.path.join(os.getcwd(), "version.txt")
    # لو مفيش ملف النسخة، نعمله افتراضيًا
    if not os.path.exists(version_file):
        with open(version_file, "w") as f:
            f.write("1.0")
    # نقرأ النسخة الحالية
    with open(version_file, "r") as f:
        current_version = f.read().strip()
    # ندور على ملف تحديث
    update_files = [f for f in os.listdir(updates_folder) if f.endswith(".zip")]
    if not update_files:
        return  # مفيش تحديث
    update_path = os.path.join(updates_folder, update_files[0])
    update_version = update_files[0].replace(".zip", "")
    # نتحقق لو النسخة الجديدة أحدث
    if update_version > current_version:
        print(f"🔄 جاري تثبيت التحديث {update_version} ...")
        # فك الضغط بدون حذف البيانات
        with zipfile.ZipFile(update_path, "r") as zip_ref:
            zip_ref.extractall(os.getcwd())
        # تحديث رقم النسخة
        with open(version_file, "w") as f:
            f.write(update_version)
        print("✅ تم تحديث البرنامج بنجاح!")
    else:
        print("🚀 البرنامج محدث بالفعل.")


from flask import Flask, render_template_string, request, redirect, url_for, jsonify, flash
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, date
from decimal import Decimal
import threading
import sys
import os
import os
import win32print
import win32api
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from datetime import datetime
import threading
import time
from PyQt5.QtWidgets import QMessageBox
# 🖨️ متغير عام لتخزين الطابعة الحالية
current_printer = None
def monitor_printers(callback):
    """مراقبة الطابعات بشكل دوري وتنفيذ callback لو تم توصيل طابعة جديدة"""
    global current_printer
    while True:
        try:
            printers = [p[2] for p in win32print.EnumPrinters(2)]
            if printers:
                default_printer = win32print.GetDefaultPrinter()
                if default_printer != current_printer:
                    current_printer = default_printer
                    callback(current_printer)
            time.sleep(55)  # فحص كل 5 ثواني
        except Exception:
            time.sleep(12)
def on_new_printer_detected(printer_name):
    """تنبيه بسيط لمرة واحدة فقط عند اكتشاف طابعة جديدة"""
    print(f"✅ تم اكتشاف طابعة جديدة: {printer_name}")
def print_invoice_auto(invoice_data):
    """
    invoice_data = {
        "invoice_id": 123,
        "store_name": " بيع سوبر ماركت",
        "products": [
            {"name": "بيبسي", "price": 15.5, "quantity": 2},
            {"name": "شيبسي", "price": 10, "quantity": 3}
        ],
        "total": 61.0
    }
    """
    # توليد ملف PDF مؤقت للفاتورة
    file_name = f"invoice_{invoice_data['invoice_id']}.pdf"
    pdf_path = os.path.join(os.getcwd(), file_name)
    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4
    c.setFont("Helvetica-Bold", 18)
    c.drawCentredString(width / 2, height - 50, invoice_data["store_name"])
    c.setFont("Helvetica", 12)
    c.drawString(40, height - 80, f"رقم الفاتورة: {invoice_data['invoice_id']}")
    c.drawString(400, height - 80, f"التاريخ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}")
    y = height - 120
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "المنتج")
    c.drawString(250, y, "السعر")
    c.drawString(350, y, "الكمية")
    c.drawString(450, y, "الإجمالي")
    c.setFont("Helvetica", 11)
    y -= 20
    for item in invoice_data["products"]:
        total_price = item["price"] * item["quantity"]
        c.drawString(50, y, item["name"])
        c.drawString(250, y, f"{item['price']:.2f}")
        c.drawString(350, y, str(item["quantity"]))
        c.drawString(450, y, f"{total_price:.2f}")
        y -= 20
    c.setFont("Helvetica-Bold", 13)
    c.drawString(50, y - 20, f"الإجمالي الكلي: {invoice_data['total']:.2f} جنيه")
    c.showPage()
    c.save()
    # التحقق من وجود طابعة متصلة
    try:
        printer_name = win32print.GetDefaultPrinter()
        if printer_name:
            print(f"🖨️ الطباعة على: {printer_name}")
            win32api.ShellExecute(0, "print", pdf_path, None, ".", 0)
        else:
            raise Exception("لا توجد طابعة افتراضية")
    except Exception:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("تنبيه الطباعة")
        msg.setText("⚠️ لا توجد طابعة متصلة!\nسيتم عرض الفاتورة بدل الطباعة.")
        msg.exec_()
        os.startfile(pdf_path)
# 🧠 تشغيل مراقبة الطابعات في الخلفية (بشكل هادئ)
thread = threading.Thread(target=monitor_printers, args=(on_new_printer_detected,), daemon=True)
thread.start()
# ---------------- Flask App & DB ----------------
app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'replace-this-with-a-secure-key'
db = SQLAlchemy(app)
# --------- Models ---------
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    barcode = db.Column(db.String(64), unique=True, nullable=True)
    name = db.Column(db.String(200), nullable=False)
    price = db.Column(db.Numeric(10, 2), nullable=False)
    cost = db.Column(db.Numeric(10, 2), nullable=True)
    quantity = db.Column(db.Numeric(10, 3), nullable=False, default=0)
    unit = db.Column(db.String(20), default='pcs')
    expiry = db.Column(db.Date, nullable=True)
class Sale(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    total = db.Column(db.Numeric(12, 2), nullable=False)
    items = db.relationship('SaleItem', backref='sale', cascade='all, delete-orphan')
class SaleItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sale_id = db.Column(db.Integer, db.ForeignKey('sale.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    product = db.relationship('Product')
    qty = db.Column(db.Numeric(10, 3), nullable=False)
    price = db.Column(db.Numeric(10, 2), nullable=False)
# --------- Helpers ---------
def init_db():
    db.create_all()
    # add some sample products if empty
    if Product.query.count() == 0:
        p1 = Product(barcode='6291041500213', name='أرز 1كجم', price=Decimal('40.00'), cost=Decimal('30.00'), quantity=Decimal('50'), unit='kg')
        p2 = Product(barcode='6291041500214', name='حليب 1لتر', price=Decimal('25.00'), cost=Decimal('18.00'), quantity=Decimal('100'), unit='pcs')
        p3 = Product(barcode='6291041500215', name='سكر 1كجم', price=Decimal('35.00'), cost=Decimal('25.00'), quantity=Decimal('40'), unit='kg')
        db.session.add_all([p1, p2, p3])
        db.session.commit()
def decimal_to_str(d):
    if d is None:
        return None
    return format(d, 'f')
# ---------------- Templates (from your code, completed) ----------------
HOME_HTML = """..."""  # placeholder below replaced dynamically to keep message short
# We'll insert full HTML templates programmatically below to avoid massive duplication in assistant reply.
# (To keep readability here, we'll set templates as variables below)
HOME_HTML = """
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <title>ساستم - لاداره العمال</title>
    <style>
        body { font-family: 'Arial', sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #333; margin: 0; padding: 20px; direction: rtl; }
        h1, h2 { color: #fff; text-align: center; }
        input, button { padding: 10px; margin: 5px; border: none; border-radius: 5px; font-size: 16px; }
        button { background: #4CAF50; color: white; cursor: pointer; }
        button:hover { background: #45a049; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; background: white; border-radius: 8px; overflow: hidden; }
        th, td { padding: 12px; text-align: center; border-bottom: 1px solid #ddd; }
        th { background: #f2f2f2; }
        #total { font-weight: bold; color: #ff5722; }
        .exit-btn { background: #f44336; position: fixed; top: 10px; left: 10px; padding: 8px 12px; border-radius: 6px; color: white; }
        .exit-btn:hover { background: #d32f2f; }
    </style>
</head>
<body>
    <button class="exit-btn" onclick="fetch('/shutdown', {method:'POST'}).then(()=>{window.close();})">خروج</button>
    
    <h1>سستم  - لاداره الاعمال (فرع واحد)</h1>
    <h2>إضافة للفاتورة (مسح أو إدخال رقم المنتج/اسم)</h2>
    <input type="text" id="lookup" placeholder="رقم المنتج أو اسم المنتج" onkeypress="if(event.key === 'Enter') lookupProduct();">
    <button onclick="lookupProduct()">إضافة</button>
    <div id="product-info" style="color: red;"></div>
    <h2>السلة</h2>
    <table>
        <thead><tr><th>المنتج</th><th>الكمية</th><th>السعر</th><th>المجموع</th><th>الإجراء</th></tr></thead>
        <tbody id="cart-table"></tbody>
    </table>
    <p>الإجمالي: <span id="total">0.00</span> جنيه </p>
    <button onclick="completeSale()">إنهاء البيع</button>
    <button onclick="printReceipt()">طباعة الإيصال</button>
    <p><a href="/admin">إدارة المنتجات والمخزون</a> | <a href="/reports">تقارير المبيعات</a></p>
    <script>
        let cart = [];
        let lastSaleId = null;
        function lookupProduct() {
            const q = document.getElementById('lookup').value.trim();
            if (!q) return;
            fetch('/api/product/lookup?q=' + encodeURIComponent(q))
                .then(r => r.json())
                .then(data => {
                    if (data.found) {
                        addToCart(data.product);
                        document.getElementById('lookup').value = '';
                        document.getElementById('product-info').innerText = '';
                    } else {
                        document.getElementById('product-info').innerText = 'المنتج غير موجود';
                    }
                });
        }
        function addToCart(product) {
            const qty = parseFloat(prompt('أدخل الكمية:', '1')) || 1;
            if (qty <= 0) return;
            const existing = cart.find(i => i.id === product.id);
            if (existing) existing.qty += qty;
            else cart.push({id: product.id, name: product.name, qty: qty, price: parseFloat(product.price)});
            updateCart();
        }
        function updateCart() {
            const table = document.getElementById('cart-table');
            table.innerHTML = '';
            let total = 0;
            cart.forEach(item => {
                const rowTotal = item.qty * item.price;
                total += rowTotal;
                table.innerHTML += `<tr><td>${item.name}</td><td>${item.qty}</td><td>${item.price.toFixed(2)}</td><td>${rowTotal.toFixed(2)}</td><td><button onclick="removeFromCart(${item.id})">إزالة</button></td></tr>`;
            });
            document.getElementById('total').innerText = total.toFixed(2);
        }
        function removeFromCart(id) {
            cart = cart.filter(i => i.id !== id);
            updateCart();
        }
        function completeSale() {
            if (cart.length === 0) return alert('السلة فارغة');
            const items = cart.map(i => ({product_id: i.id, qty: i.qty, price: i.price}));
            fetch('/api/sale', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({items: items}) })
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        alert('تم إنهاء البيع! رقم البيع: ' + data.sale_id);
                        lastSaleId = data.sale_id;
                        cart = [];
                        updateCart();
                    } else {
                        alert('خطأ: ' + data.error);
                    }
                });
        }
        function printReceipt() {
            if (lastSaleId) {
                window.open('/receipt/' + lastSaleId, '_blank');
            } else {
                alert('لا يوجد مطبعه');
            }
        }
    </script>
</body>
</html>
"""
ADMIN_HTML = """
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <title>إدارة المنتجات</title>
    <style>
        body { font-family: 'Arial', sans-serif; background: #f4f4f4; margin: 20px; direction: rtl; }
        h1, h2 { color: #333; }
        form { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        input { padding: 8px; margin: 5px; width: 200px; }
        button { padding: 10px; background: #2196F3; color: white; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #1976D2; }
        table { width: 100%; border-collapse: collapse; background: white; }
        th, td { padding: 10px; text-align: center; border: 1px solid #ddd; }
        th { background: #eee; }
        .flash { color: red; }
    </style>
</head>
<body>
    <h1>إدارة المنتجات</h1>
    <a href="/">العودة لنقطة البيع</a>
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <div class="flash">{{ messages[0] }}</div>
        {% endif %}
    {% endwith %}
    <h2>إضافة منتج</h2>
    <form method="POST" action="/admin/add">
        راقم المنتج: <input name="barcode"><br>
        الاسم المنتج: <input name="name" required><br>
        السعر: <input name="price" type="number" step="0.01" required><br>
        الكمية: <input name="qty" type="number" step="0.001" value="0"><br>
        <button type="submit">إضافة</button>
    </form>
    <h2>المنتجات</h2>
    <table>
        <thead>
            <tr><th>راقم المنتج</th><th>اسم المنتج  </th><th>السعر</th><th>الكمية</th><th>الإجراءات</th></tr>
        </thead>
        <tbody>
            {% for product in products %}
            <tr>
                <td>{{ product.barcode or 'غير محدد' }}</td>
                <td>{{ product.name }}</td>
                <td>{{ product.price }}</td>
                <td>{{ product.quantity }}</td>
                <td>
                    <a href="/admin/edit/{{ product.id }}">تعديل</a> | 
                    <a href="/admin/stock/{{ product.id }}">إدارة المخزون</a> | 
                    <a href="/admin/delete/{{ product.id }}" onclick="return confirm('هل أنت متأكد؟')">حذف</a>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
"""
REPORTS_HTML = """
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <title>تقارير المبيعات</title>
    <style>
        body { font-family: 'Arial', sans-serif; background: #f4f4f4; margin: 20px; direction: rtl; }
        h1, h2 { color: #333; }
        table { width: 100%; border-collapse: collapse; background: white; }
        th, td { padding: 10px; text-align: center; border: 1px solid #ddd; }
        th { background: #eee; }
    </style>
</head>
<body>
    <h1>تقارير المبيعات</h1>
    <a href="/">العودة لنقطة البيع</a>
    <h2>ملخص المبيعات اليومية</h2>
    <p>إجمالي المبيعات اليوم: {{ daily_total }} جنيه </p>
    <h2>أفضل المنتجات مبيعًا</h2>
    <table>
        <thead>
            <tr><th>المنتج</th><th>الكمية المباعة</th><th>الإيراد</th></tr>
        </thead>
        <tbody>
            {% for item in top_products %}
            <tr><td>{{ item.name }}</td><td>{{ item.total_qty }}</td><td>{{ item.total_revenue }}</td></tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
"""
RECEIPT_HTML = """
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <title>إيصال البيع</title>
    <style>
        body { font-family: 'Courier New', monospace; margin: 20px; direction: rtl; }
        h1 { text-align: center; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { padding: 6px; border-bottom: 1px solid #ddd; text-align: left; }
    </style>
</head>
<body>
    <h1>إيصال البيع</h1>
    <p>رقم الإيصال: {{ sale.id }}</p>
    <p>التاريخ: {{ sale.timestamp }}</p>
    <table>
        <thead><tr><th>المنتج</th><th>الكمية</th><th>السعر</th><th>المجموع</th></tr></thead>
        <tbody>
            {% for it in items %}
            <tr>
                <td>{{ it.product.name }}</td>
                <td>{{ it.qty }}</td>
                <td>{{ it.price }}</td>
                <td>{{ (it.qty * it.price)|round(2) }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <h3>الإجمالي: {{ sale.total }}</h3>
</body>
</html>
"""
# ---------------- Routes ----------------
@app.route('/')
def home():
    return render_template_string(HOME_HTML)
@app.route('/admin')
def admin():
    products = Product.query.order_by(Product.id.desc()).all()
    # convert displayable values
    for p in products:
        p.price = decimal_to_str(p.price)
        p.quantity = decimal_to_str(p.quantity)
    return render_template_string(ADMIN_HTML, products=products)
@app.route('/admin/add', methods=['POST'])
def admin_add():
    barcode = request.form.get('barcode') or None
    name = request.form.get('name')
    price = request.form.get('price') or '0'
    qty = request.form.get('qty') or '0'
    try:
        p = Product(barcode=barcode, name=name, price=Decimal(price), quantity=Decimal(qty))
        db.session.add(p)
        db.session.commit()
        flash('تمت إضافة المنتج')
    except Exception as e:
        db.session.rollback()
        flash('خطأ في الإضافة: ' + str(e))
    return redirect(url_for('admin'))
@app.route('/admin/delete/<int:pid>')
def admin_delete(pid):
    p = Product.query.get_or_404(pid)
    try:
        db.session.delete(p)
        db.session.commit()
        flash('تم الحذف')
    except Exception as e:
        db.session.rollback()
        flash('خطأ: ' + str(e))
    return redirect(url_for('admin'))
@app.route('/reports')
def reports():
    today = date.today()
    sales_today = Sale.query.filter(db.func.date(Sale.timestamp) == today).all()
    daily_total = sum([s.total for s in sales_today]) or Decimal('0.00')
    # top products
    q = db.session.query(
        Product.name,
        db.func.sum(SaleItem.qty).label('total_qty'),
        db.func.sum(SaleItem.qty * SaleItem.price).label('total_revenue')
    ).join(SaleItem, Product.id == SaleItem.product_id).group_by(Product.id).order_by(db.desc('total_qty')).limit(10)
    top_products = []
    for row in q:
        top_products.append({
            'name': row[0],
            'total_qty': decimal_to_str(row[1] or Decimal('0')),
            'total_revenue': decimal_to_str(row[2] or Decimal('0.00'))
        })
    return render_template_string(REPORTS_HTML, daily_total=decimal_to_str(daily_total), top_products=top_products)
# API lookup: search by barcode or name substring
@app.route('/api/product/lookup')
def api_lookup():
    q = request.args.get('q', '').strip()
    if not q:
        return jsonify({'found': False})
    # try exact barcode
    prod = Product.query.filter((Product.barcode == q) | (db.func.lower(Product.name).like(f"%{q.lower()}%"))).first()
    if not prod:
        return jsonify({'found': False})
    res = {
        'id': prod.id,
        'barcode': prod.barcode,
        'name': prod.name,
        'price': decimal_to_str(prod.price),
        'quantity': decimal_to_str(prod.quantity),
        'unit': prod.unit
    }
    return jsonify({'found': True, 'product': res})
# API to create sale
@app.route('/api/sale', methods=['POST'])
def api_sale():
    data = request.get_json() or {}
    items = data.get('items', [])
    if not items:
        return jsonify({'success': False, 'error': 'السلة فارغة'})
    total = Decimal('0.00')
    sale = Sale(total=Decimal('0.00'))
    db.session.add(sale)
    try:
        for it in items:
            pid = int(it.get('product_id'))
            qty = Decimal(str(it.get('qty')))
            price = Decimal(str(it.get('price')))
            prod = Product.query.get(pid)
            if not prod:
                raise Exception(f'المنتج {pid} غير موجود')
            # check stock
            if prod.quantity is not None and qty > prod.quantity:
                raise Exception(f'كمية غير كافية في المخزون للمنتج {prod.name}')
            # deduct
            prod.quantity = prod.quantity - qty
            si = SaleItem(sale=sale, product=prod, qty=qty, price=price)
            db.session.add(si)
            total += (qty * price)
        sale.total = total
        db.session.commit()
        return jsonify({'success': True, 'sale_id': sale.id})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)})
@app.route('/receipt/<int:sale_id>')
def receipt(sale_id):
    sale = Sale.query.get_or_404(sale_id)
    items = sale.items
    # convert numeric types for template display
    for it in items:
        it.price = float(it.price)
        it.qty = float(it.qty)
    return render_template_string(RECEIPT_HTML, sale=sale, items=items)
# A shutdown route to allow UI button to close the server cleanly
@app.route('/shutdown', methods=['POST'])
def shutdown():
    func = request.environ.get('werkzeug.server.shutdown')
    if func:
        func()
    return 'shutting down'
# ---------------- Desktop Launcher (PyQt) ----------------
from decimal import Decimal
from flask import flash, redirect, url_for, request
# ---------- تعديل منتج ----------
@app.route('/admin/edit/<int:pid>', methods=['GET', 'POST'])
def admin_edit(pid):
    product = Product.query.get(pid)
    if not product:
        flash('⚠️ المنتج غير موجود')
        return redirect(url_for('admin'))
    if request.method == 'POST':
        try:
            product.barcode = request.form.get('barcode') or None
            product.name = request.form.get('name') or ''
            product.price = Decimal(request.form.get('price') or '0')
            product.quantity = Decimal(request.form.get('quantity') or '0')
            product.unit = request.form.get('unit') or product.unit
            db.session.commit()
            flash('✅ تم تعديل المنتج بنجاح')
            return redirect(url_for('admin'))
        except Exception as e:
            db.session.rollback()
            flash('❌ خطأ أثناء التعديل: ' + str(e))
            return redirect(url_for('admin_edit', pid=pid))
    # صفحة تعديل المنتج
    html = f"""
    <!DOCTYPE html>
    <html dir="rtl" lang="ar">
    <head>
      <meta charset="utf-8">
      <title>تعديل المنتج</title>
      <style>
        body {{ font-family: Arial; direction: rtl; padding: 20px; background: #fafafa; }}
        input, button {{ font-size: 16px; padding: 8px; margin: 5px; }}
        label {{ display: block; margin-top: 10px; }}
      </style>
    </head>
    <body>
      <h2>🛠️ تعديل المنتج</h2>
      <form method="POST">
        <label>الباركود:</label>
        <input name="barcode" value="{product.barcode or ''}">
        <label>الاسم:</label>
        <input name="name" required value="{product.name}">
        <label>السعر:</label>
        <input name="price" type="number" step="0.01" value="{product.price}">
        <label>الكمية:</label>
        <input name="quantity" type="number" step="0.001" value="{product.quantity}">
        <label>الوحدة:</label>
        <input name="unit" value="{product.unit}">
        <br><br>
        <button type="submit">💾 حفظ التعديلات</button>
        <a href="{ url_for('admin') }"><button type="button">🔙 العودة</button></a>
      </form>
    </body>
    </html>
    """
    return html
# ---------- إدارة المخزون ----------
@app.route('/admin/stock/<int:pid>', methods=['GET', 'POST'])
def admin_stock(pid):
    product = Product.query.get(pid)
    if not product:
        flash('⚠️ المنتج غير موجود')
        return redirect(url_for('admin'))
    if request.method == 'POST':
        action = request.form.get('action')
        amount = Decimal(request.form.get('amount') or '0')
        try:
            if action == 'add':
                product.quantity += amount
            elif action == 'remove':
                product.quantity = max(Decimal('0'), product.quantity - amount)
            elif action == 'set':
                product.quantity = amount
            db.session.commit()
            flash('✅ تم تحديث الكمية')
        except Exception as e:
            db.session.rollback()
            flash('❌ خطأ أثناء تحديث الكمية: ' + str(e))
        return redirect(url_for('admin'))
    html = f"""
    <!DOCTYPE html>
    <html dir="rtl" lang="ar">
    <head>
      <meta charset="utf-8">
      <title>إدارة المخزون</title>
      <style>
        body {{ font-family: Arial; direction: rtl; padding: 20px; background: #fafafa; }}
        input, button {{ font-size: 16px; padding: 8px; margin: 5px; }}
        label {{ display: block; margin-top: 10px; }}
      </style>
    </head>
    <body>
      <h2>📦 إدارة مخزون المنتج: {product.name}</h2>
      <p>الكمية الحالية: {product.quantity}</p>
      <form method="POST">
        <label>الكمية:</label>
        <input name="amount" type="number" step="0.001" required value="1"><br><br>
        <button name="action" value="add">➕ زيادة</button>
        <button name="action" value="remove">➖ إنقاص</button>
        <button name="action" value="set">⚙️ تعيين كمية</button>
      </form>
      <br>
      <a href="{ url_for('admin') }"><button type="button">🔙 العودة</button></a>
    </body>
    </html>
    """
    return html
def start_desktop_app():
    # import here to keep Flask-only usage possible if not running desktop
    from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QHBoxLayout
    from PyQt5.QtWebEngineWidgets import QWebEngineView
    from PyQt5.QtCore import QUrl, Qt
    class POSWindow(QMainWindow):
        def __init__(self):
            super().__init__()
            self.setWindowTitle("نقطة بيع - سوبر ماركت")
            # Fullscreen:
            self.showFullScreen()
            # central widget
            central = QWidget()
            self.setCentralWidget(central)
            v = QVBoxLayout()
            # top controls (exit)
            topbar = QHBoxLayout()
            exit_btn = QPushButton("خروج")
            exit_btn.setFixedHeight(40)
            exit_btn.clicked.connect(self.close_application)
            topbar.addStretch()
            topbar.addWidget(exit_btn)
            v.addLayout(topbar)
            # web view
            self.browser = QWebEngineView()
            self.browser.setUrl(QUrl("http://127.0.0.1:5000/"))
            v.addWidget(self.browser)
            central.setLayout(v)
        def close_application(self):
            # try to call shutdown route to stop flask then close app
            try:
                import requests
                requests.post("http://127.0.0.1:5000/shutdown", timeout=1)
            except Exception:
                pass
            QApplication.quit()
    # start qt app
    qt_app = QApplication(sys.argv)
    win = POSWindow()
    win.show()
    qt_app.exec_()
#__________________انشاء نسخه احطياطيه_________________
import os
import shutil
import datetime
from PyQt5.QtWidgets import QMessageBox
def create_backup(data_file_path):
    """إنشاء نسخة احتياطية من قاعدة البيانات أو ملف البيانات"""
    try:
        if not os.path.exists(data_file_path):
            raise FileNotFoundError("❌ لم يتم العثور على ملف البيانات.")
        # إنشاء مجلد النسخ الاحتياطية إذا لم يكن موجودًا
        backup_dir = os.path.join(os.getcwd(), "backup")
        os.makedirs(backup_dir, exist_ok=True)
        # اسم النسخة الاحتياطية حسب التاريخ والوقت
        file_name = os.path.basename(data_file_path)
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup_{timestamp}_{file_name}"
        backup_path = os.path.join(backup_dir, backup_name)
        shutil.copy2(data_file_path, backup_path)
        print(f"✅ تم إنشاء النسخة الاحتياطية بنجاح: {backup_name}")
    except Exception as e:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("خطأ في النسخ الاحتياطي")
        msg.setText(f"حدث خطأ أثناء إنشاء النسخة الاحتياطية:\n{e}")
        msg.exec_()
def restore_backup(data_file_path):
    """استرجاع أحدث نسخة احتياطية تلقائيًا"""
    try:
        backup_dir = os.path.join(os.getcwd(), "backup")
        if not os.path.exists(backup_dir) or not os.listdir(backup_dir):
            raise FileNotFoundError("⚠️ لا توجد نسخ احتياطية متاحة للاسترجاع.")
        # اختيار أحدث نسخة بناءً على التاريخ
        backups = sorted(os.listdir(backup_dir), reverse=True)
        latest_backup = backups[0]
        latest_backup_path = os.path.join(backup_dir, latest_backup)
        shutil.copy2(latest_backup_path, data_file_path)
        print(f"♻️ تم استرجاع البيانات من النسخة: {latest_backup}")
    except Exception as e:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("خطأ في الاسترجاع")
        msg.setText(f"حدث خطأ أثناء استرجاع النسخة الاحتياطية:\n{e}")
        msg.exec_()

# ---------------- Main runner ----------------
if __name__ == '__main__':
    # ensure DB and sample data
    with app.app_context():
        init_db()
    # run flask in background thread
    def run_flask():
        # host localhost, port 5000
        app.run(host='127.0.0.1', port=5000, debug=False, use_reloader=False)
    t = threading.Thread(target=run_flask, daemon=True)
    t.start()
    # start desktop UI (this will open full-screen window with the POS)
    try:
        start_desktop_app()
    except Exception as e:
        print("خطأ في تشغيل الواجهة الرسومية:", e)
        print("يمكنك تشغيل السيرفر يدوياً بفتح المتصفح على http://127.0.0.1:5000")
