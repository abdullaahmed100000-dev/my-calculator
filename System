pos_desktop.py  (نسخة محدثة جاهزة  للنسخ)
import os import zipfile import shutil import datetime import threading import time import sys from decimal import Decimal from flask import Flask, render_template_string, request, redirect, url_for, jsonify, flash from flask_sqlalchemy import SQLAlchemy from datetime import datetime, date from sqlalchemy import extract
PyQt (واجهة سطح المكتب)
from PyQt5.QtWidgets import QMessageBox from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QHBoxLayout from PyQt5.QtWebEngineWidgets import QWebEngineView from PyQt5.QtCore import QUrl
طباعة ويندوز وPDF
try:     import win32print     import win32api except Exception:     win32print = None     win32api = None from reportlab.lib.pagesizes import A4 from reportlab.pdfgen import canvas
---------------- Flask app & DB ----------------
app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False app.config['SECRET_KEY'] = 'replace-this-with-a-secure-key' db = SQLAlchemy(app)
---------------- Models ----------------
class Product(db.Model):     id = db.Column(db.Integer, primary_key=True)     barcode = db.Column(db.String(64), unique=True, nullable=True)     name = db.Column(db.String(200), nullable=False)     price = db.Column(db.Numeric(10, 2), nullable=False)     cost = db.Column(db.Numeric(10, 2), nullable=True)     quantity = db.Column(db.Numeric(10, 3), nullable=False, default=0)     unit = db.Column(db.String(20), default='pcs')     expiry = db.Column(db.Date, nullable=True) class Sale(db.Model):     id = db.Column(db.Integer, primary_key=True)     timestamp = db.Column(db.DateTime, default=datetime.utcnow)     total = db.Column(db.Numeric(12, 2), nullable=False)     items = db.relationship('SaleItem', backref='sale', cascade='all, delete-orphan') class SaleItem(db.Model):     id = db.Column(db.Integer, primary_key=True)     sale_id = db.Column(db.Integer, db.ForeignKey('sale.id'), nullable=False)     product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)     product = db.relationship('Product')     qty = db.Column(db.Numeric(10, 3), nullable=False)     price = db.Column(db.Numeric(10, 2), nullable=False) class Expense(db.Model):     id = db.Column(db.Integer, primary_key=True)     timestamp = db.Column(db.DateTime, default=datetime.utcnow)     amount = db.Column(db.Numeric(12,2), nullable=False)     description = db.Column(db.String(400), nullable=True)
---------------- Helpers ----------------
def init_db():     db.create_all()     # add some sample products if empty     if Product.query.count() == 0:         p1 = Product(barcode='6291041500213', name='أرز 1كجم', price=Decimal('40.00'), cost=Decimal('30.00'), quantity=Decimal('50'), unit='kg')         p2 = Product(barcode='6291041500214', name='حليب 1لتر', price=Decimal('25.00'), cost=Decimal('18.00'), quantity=Decimal('100'), unit='pcs')         p3 = Product(barcode='6291041500215', name='سكر 1كجم', price=Decimal('35.00'), cost=Decimal('25.00'), quantity=Decimal('40'), unit='kg')         db.session.add_all([p1, p2, p3])         db.session.commit() def decimal_to_str(d):     if d is None:         return "0"     return format(d, 'f')
---------------- Printing / Invoice ----------------
def print_invoice_auto(invoice_data):     file_name = f"invoice_{invoice_data['invoice_id']}.pdf"     pdf_path = os.path.join(os.getcwd(), file_name)     c = canvas.Canvas(pdf_path, pagesize=A4)     width, height = A4     c.setFont("Helvetica-Bold", 18)     c.drawCentredString(width / 2, height - 50, invoice_data["store_name"])     c.setFont("Helvetica", 12)     c.drawString(40, height - 80, f"رقم الفاتورة: {invoice_data['invoice_id']}")     c.drawString(400, height - 80, f"التاريخ: {datetime.now().strftime('%Y-%m-%d %H:%M')}")     y = height - 120     c.setFont("Helvetica-Bold", 12)     c.drawString(50, y, "المنتج")     c.drawString(250, y, "السعر")     c.drawString(350, y, "الكمية")     c.drawString(450, y, "الإجمالي")     c.setFont("Helvetica", 11)     y -= 20     for item in invoice_data["products"]:         total_price = float(item["price"]) * float(item["quantity"])         c.drawString(50, y, item["name"])         c.drawString(250, y, f"{float(item['price']):.2f}")         c.drawString(350, y, str(item["quantity"]))         c.drawString(450, y, f"{total_price:.2f}")         y -= 20     c.setFont("Helvetica-Bold", 13)     c.drawString(50, y - 20, f"الإجمالي الكلي: {float(invoice_data['total']):.2f} جنيه")     c.showPage()     c.save()     # Try print via default printer, otherwise open PDF     try:         if win32print:             printer_name = win32print.GetDefaultPrinter()             if printer_name:                 win32api.ShellExecute(0, "print", pdf_path, None, ".", 0)             else:                 raise Exception("لا توجد طابعة افتراضية")         else:             raise Exception("وحدة win32 للطباعة غير متاحة")     except Exception as e:         try:             msg = QMessageBox()             msg.setIcon(QMessageBox.Warning)             msg.setWindowTitle("تنبيه الطباعة")             msg.setText("⚠️ لا توجد طابعة متصلة!\nسيتم عرض الفاتورة بدل الطباعة.")             msg.exec_()         except Exception:             pass         os.startfile(pdf_path)
---------------- Update utilities ----------------
def is_update_available():     """يفحص مجلد updates إذا في ملفات zip ويقارن مع version.txt"""     try:         updates_folder = os.path.join(os.getcwd(), "updates")         version_file = os.path.join(os.getcwd(), "version.txt")         if not os.path.exists(version_file):             with open(version_file, "w") as f:                 f.write("1.0")         with open(version_file, "r") as f:             current_version = f.read().strip()         if not os.path.exists(updates_folder):             return False, None         update_files = sorted([f for f in os.listdir(updates_folder) if f.endswith(".zip")], reverse=True)         if not update_files:             return False, None         update_name = update_files[0]         update_version = update_name.replace(".zip","")         return (update_version > current_version), os.path.join(updates_folder, update_name)     except Exception:         return False, None def apply_update_from_zip(zip_path):     """يفك zip ويحدث ملفات المشروع دون حذف بيانات"""     try:         if not os.path.exists(zip_path):             return False, "ملف التحديث غير موجود"         temp_dir = os.path.join(os.getcwd(), "temp_update")         if os.path.exists(temp_dir):             shutil.rmtree(temp_dir)         with zipfile.ZipFile(zip_path, 'r') as zip_ref:             zip_ref.extractall(temp_dir)         # determine new version         new_version = None         vfile = os.path.join(temp_dir, "version.txt")         if os.path.exists(vfile):             with open(vfile, "r") as f:                 new_version = f.read().strip()         else:             new_version = os.path.basename(zip_path).replace(".zip","")         # copy files (overwrite)         for item in os.listdir(temp_dir):             s = os.path.join(temp_dir, item)             d = os.path.join(os.getcwd(), item)             # don't allow overwriting backup folder             if os.path.basename(s).lower() == "backup":                 continue             if os.path.isdir(s):                 shutil.copytree(s, d, dirs_exist_ok=True)             else:                 shutil.copy2(s, d)         shutil.rmtree(temp_dir)         with open(os.path.join(os.getcwd(), "version.txt"), "w") as f:             f.write(str(new_version))         return True, new_version     except Exception as e:         return False, str(e)
---------------- Backup utilities ----------------
def create_backup(data_file_path):     """إنشاء نسخة احتياطية من ملف data.db"""     try:         if not os.path.exists(data_file_path):             raise FileNotFoundError("❌ لم يتم العثور على ملف البيانات.")         backup_dir = os.path.join(os.getcwd(), "backup")         os.makedirs(backup_dir, exist_ok=True)         file_name = os.path.basename(data_file_path)         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")         backup_name = f"backup_{timestamp}{file_name}"         backup_path = os.path.join(backup_dir, backup_name)         shutil.copy2(data_file_path, backup_path)         print(f"✅ تم إنشاء النسخة الاحتياطية بنجاح: {backup_name}")     except Exception as e:         try:             msg = QMessageBox()             msg.setIcon(QMessageBox.Warning)             msg.setWindowTitle("خطأ في النسخ الاحتياطي")             msg.setText(f"حدث خطأ أثناء إنشاء النسخة الاحتياطية:\n{e}")             msg.exec()         except Exception:             pass         raise def restore_backup(data_file_path):     """استرجاع أحدث نسخة احتياطية تلقائيًا"""     try:         backup_dir = os.path.join(os.getcwd(), "backup")         if not os.path.exists(backup_dir) or not os.listdir(backup_dir):             raise FileNotFoundError("⚠️ لا توجد نسخ احتياطية متاحة للاسترجاع.")         backups = sorted(os.listdir(backup_dir), reverse=True)         latest_backup = backups[0]         latest_backup_path = os.path.join(backup_dir, latest_backup)         shutil.copy2(latest_backup_path, data_file_path)         print(f"♻️ تم استرجاع البيانات من النسخة: {latest_backup}")     except Exception as e:         try:             msg = QMessageBox()             msg.setIcon(QMessageBox.Warning)             msg.setWindowTitle("خطأ في الاسترجاع")             msg.setText(f"حدث خطأ أثناء استرجاع النسخة الاحتياطية:\n{e}")             msg.exec_()         except Exception:             pass         raise
---------------- Templates (HTML) ----------------
HOME_HTML = """(تم تقصير العرض في النسخة هنا — يتم توليد النسخة كاملة أدناه عند الإرسال)"""
استخدم نفس صفحات HTML الأصلية مع تعديل التقرير — سنعرفلها أدناه
HOME_HTML = """            ساستم - لاداره العمال                    خروج              
سستم  - لاداره الاعمال (فرع واحد)
    
إضافة للفاتورة (مسح أو إدخال رقم المنتج/اسم)
           إضافة            
السلة
              المنتج الكمية السعر المجموع الإجراء                      الإجمالي: 0.00 جنيه     إنهاء البيع       طباعة الإيصال        إدارة المنتجات والمخزون | تقارير المبيعات           """   REPORTS_HTML = """                       تقارير المبيعات                    
تقارير المبيعات
    العودة لنقطة البيع                إجمالي اليوم: {{ daily_total }} جنيه |           إجمالي الشهر: جاري التحميل...                     🗑️ مسح ملخص اليوم           💾 إنشاء نسخة احتياطية           ♻️ استرجاع النسخة الاحتياطية           💸 المصروفات           🔁 يوجد تحديث — اضغط للتثبيت            
أفضل المنتجات مبيعًا
                             المنتج الكمية المباعة الإيراد                                   {% for item in top_products %}                {{ item.name }} {{ item.total_qty }} {{ item.total_revenue }}             {% endfor %}                                       
إضافة مصروف
        المبلغ:            الوصف:            إضافة مصروف           إغلاق           
آخر المصروفات
         جارى التحميل...                """   RECEIPT_HTML = """                       إيصال البيع                    
إيصال البيع
     رقم الإيصال: {{ sale.id }}      التاريخ: {{ sale.timestamp }}               المنتج الكمية السعر المجموع                        {% for it in items %}                                 {{ it.product.name }}                  {{ it.qty }}                  {{ it.price }}                  {{ (it.qty * it.price)|round(2) }}                          {% endfor %}                       
الإجمالي: {{ sale.total }}
"""   ADMIN_HTML = """                       إدارة المنتجات                     
إدارة المنتجات
    العودة لنقطة البيع       {% with messages = get_flashed_messages() %}           {% if messages %}                {{ messages[0] }}         {% endif %}       {% endwith %}       
إضافة منتج
               راقم المنتج:            الاسم المنتج:            السعر:            الكمية:            إضافة              
المنتجات
                             راقم المنتج اسم المنتج   السعر الكمية الإجراءات                                   {% for product in products %}                                 {{ product.barcode or 'غير محدد' }}                  {{ product.name }}                  {{ product.price }}                  {{ product.quantity }}                                      تعديل |                        إدارة المخزون |                        حذف                                             {% endfor %}                   """   # ---------------- Routes ----------------   @app.route('/')   def home():       return render_template_string(HOME_HTML)   @app.route('/admin')   def admin():       products = Product.query.order_by(Product.id.desc()).all()       for p in products:           p.price = decimal_to_str(p.price)           p.quantity = decimal_to_str(p.quantity)       return render_template_string(ADMIN_HTML, products=products)   @app.route('/admin/add', methods=['POST'])   def admin_add():       barcode = request.form.get('barcode') or None       name = request.form.get('name')       price = request.form.get('price') or '0'       qty = request.form.get('qty') or '0'       try:           p = Product(barcode=barcode, name=name, price=Decimal(price), quantity=Decimal(qty))           db.session.add(p)           db.session.commit()           flash('تمت إضافة المنتج')       except Exception as e:           db.session.rollback()           flash('خطأ في الإضافة: ' + str(e))       return redirect(url_for('admin'))   @app.route('/admin/delete/')   def admin_delete(pid):       p = Product.query.get_or_404(pid)       try:           db.session.delete(p)           db.session.commit()           flash('تم الحذف')       except Exception as e:           db.session.rollback()           flash('خطأ: ' + str(e))       return redirect(url_for('admin'))   @app.route('/admin/edit/', methods=['GET', 'POST'])   def admin_edit(pid):       product = Product.query.get(pid)       if not product:           flash('⚠️ المنتج غير موجود')           return redirect(url_for('admin'))       if request.method == 'POST':           try:               product.barcode = request.form.get('barcode') or None               product.name = request.form.get('name') or ''               product.price = Decimal(request.form.get('price') or '0')               product.quantity = Decimal(request.form.get('quantity') or '0')               product.unit = request.form.get('unit') or product.unit               db.session.commit()               flash('✅ تم تعديل المنتج بنجاح')               return redirect(url_for('admin'))           except Exception as e:               db.session.rollback()               flash('❌ خطأ أثناء التعديل: ' + str(e))               return redirect(url_for('admin_edit', pid=pid))       html = f"""                                       تعديل المنتج                                
🛠️ تعديل المنتج
                 الباركود:                      الاسم:                      السعر:                      الكمية:                      الوحدة:                                 💾 حفظ التعديلات           🔙 العودة                              """       return html   @app.route('/admin/stock/', methods=['GET', 'POST'])   def admin_stock(pid):       product = Product.query.get(pid)       if not product:           flash('⚠️ المنتج غير موجود')           return redirect(url_for('admin'))       if request.method == 'POST':           action = request.form.get('action')           amount = Decimal(request.form.get('amount') or '0')           try:               if action == 'add':                   product.quantity += amount               elif action == 'remove':                   product.quantity = max(Decimal('0'), product.quantity - amount)               elif action == 'set':                   product.quantity = amount               db.session.commit()               flash('✅ تم تحديث الكمية')           except Exception as e:               db.session.rollback()               flash('❌ خطأ أثناء تحديث الكمية: ' + str(e))           return redirect(url_for('admin'))       html = f"""                                       إدارة المخزون                                
📦 إدارة مخزون المنتج: {product.name}
       الكمية الحالية: {product.quantity}                  الكمية:                      ➕ زيادة           ➖ إنقاص           ⚙️ تعيين كمية                           🔙 العودة                     """       return html   # API lookup   @app.route('/api/product/lookup')   def api_lookup():       q = request.args.get('q', '').strip()       if not q:           return jsonify({'found': False})       prod = Product.query.filter((Product.barcode == q) | (db.func.lower(Product.name).like(f"%{q.lower()}%"))).first()       if not prod:           return jsonify({'found': False})       res = {           'id': prod.id,           'barcode': prod.barcode,           'name': prod.name,           'price': decimal_to_str(prod.price),           'quantity': decimal_to_str(prod.quantity),           'unit': prod.unit       }       return jsonify({'found': True, 'product': res})   # API to create sale   @app.route('/api/sale', methods=['POST'])   def api_sale():       data = request.get_json() or {}       items = data.get('items', [])       if not items:           return jsonify({'success': False, 'error': 'السلة فارغة'})       total = Decimal('0.00')       sale = Sale(total=Decimal('0.00'))       db.session.add(sale)       try:           for it in items:               pid = int(it.get('product_id'))               qty = Decimal(str(it.get('qty')))               price = Decimal(str(it.get('price')))               prod = Product.query.get(pid)               if not prod:                   raise Exception(f'المنتج {pid} غير موجود')               if prod.quantity is not None and qty > prod.quantity:                   raise Exception(f'كمية غير كافية في المخزون للمنتج {prod.name}')               prod.quantity = prod.quantity - qty               si = SaleItem(sale=sale, product=prod, qty=qty, price=price)               db.session.add(si)               total += (qty * price)           sale.total = total           db.session.commit()           return jsonify({'success': True, 'sale_id': sale.id})       except Exception as e:           db.session.rollback()           return jsonify({'success': False, 'error': str(e)})   @app.route('/receipt/')   def receipt(sale_id):       sale = Sale.query.get_or_404(sale_id)       items = sale.items       for it in items:           it.price = float(it.price)           it.qty = float(it.qty)       return render_template_string(RECEIPT_HTML, sale=sale, items=items)   # ---------------- Reports and new endpoints ----------------   @app.route('/reports')   def reports():       today = date.today()       sales_today = Sale.query.filter(db.func.date(Sale.timestamp) == today).all()       daily_total = sum([s.total for s in sales_today]) or Decimal('0.00')       # top products       q = db.session.query(           Product.name,           db.func.sum(SaleItem.qty).label('total_qty'),           db.func.sum(SaleItem.qty * SaleItem.price).label('total_revenue')       ).join(SaleItem, Product.id == SaleItem.product_id).group_by(Product.id).order_by(db.desc('total_qty')).limit(10)       top_products = []       for row in q:           top_products.append({               'name': row[0],               'total_qty': decimal_to_str(row[1] or Decimal('0')),               'total_revenue': decimal_to_str(row[2] or Decimal('0.00'))           })       return render_template_string(REPORTS_HTML, daily_total=decimal_to_str(daily_total), top_products=top_products)   @app.route('/reports/delete_today', methods=['POST'])   def delete_today_sales():       try:           today = date.today()           sales_today = Sale.query.filter(db.func.date(Sale.timestamp) == today).all()           ids = [s.id for s in sales_today]           if ids:               SaleItem.query.filter(SaleItem.sale_id.in_(ids)).delete(synchronize_session=False)               Sale.query.filter(Sale.id.in_(ids)).delete(synchronize_session=False)               db.session.commit()           return jsonify({'success': True})       except Exception as e:           db.session.rollback()           return jsonify({'success': False, 'error': str(e)})   @app.route('/reports/monthly_total')   def reports_monthly_total():       today = date.today()       month = today.month       year = today.year       sales_month = Sale.query.filter(extract('month', Sale.timestamp) == month, extract('year', Sale.timestamp) == year).all()       monthly_total = sum([s.total for s in sales_month]) or Decimal('0.00')       expenses_month = Expense.query.filter(extract('month', Expense.timestamp) == month, extract('year', Expense.timestamp) == year).all()       expenses_total = sum([e.amount for e in expenses_month]) or Decimal('0.00')       net = monthly_total - expenses_total       return jsonify({'monthly_total': decimal_to_str(monthly_total), 'monthly_expenses': decimal_to_str(expenses_total), 'net': decimal_to_str(net)})   # ---------------- Expenses endpoints ----------------   @app.route('/expenses', methods=['GET'])   def expenses_page():       exps = Expense.query.order_by(Expense.timestamp.desc()).limit(100).all()       arr = [{'id': e.id, 'timestamp': e.timestamp.strftime("%Y-%m-%d %H:%M:%S"), 'amount': decimal_to_str(e.amount), 'description': e.description} for e in exps]       return jsonify({'expenses': arr})   @app.route('/expenses/add', methods=['POST'])   def add_expense():       data = request.get_json() or {}       try:           amount = Decimal(str(data.get('amount', '0')))           desc = data.get('description', '')           e = Expense(amount=amount, description=desc)           db.session.add(e)           db.session.commit()           return jsonify({'success': True})       except Exception as ex:           db.session.rollback()           return jsonify({'success': False, 'error': str(ex)})   # ---------------- Update endpoints ----------------   @app.route('/update/check')   def update_check():       available, path = is_update_available()       return jsonify({'available': bool(available)})   @app.route('/update/apply', methods=['POST'])   def update_apply():       available, path = is_update_available()       if not available or path is None:           return jsonify({'success': False, 'error': 'لا يوجد تحديث متاح'})       ok, info = apply_update_from_zip(path)       if ok:           return jsonify({'success': True, 'new_version': info})       else:           return jsonify({'success': False, 'error': info})   # ---------------- Backup endpoints ----------------   @app.route('/backup/create', methods=['POST'])   def backup_create_route():       data_file = os.path.join(os.getcwd(), "data.db")       try:           create_backup(data_file)           return jsonify({'success': True})       except Exception as e:           return jsonify({'success': False, 'error': str(e)})   @app.route('/backup/restore', methods=['POST'])   def backup_restore_route():       data_file = os.path.join(os.getcwd(), "data.db")       try:           restore_backup(data_file)           return jsonify({'success': True})       except Exception as e:           return jsonify({'success': False, 'error': str(e)})   # ---------------- Shutdown (for exit button) ----------------   @app.route('/shutdown', methods=['POST'])   def shutdown():       func = request.environ.get('werkzeug.server.shutdown')       if func:           func()       return 'shutting down'   # ---------------- Desktop Launcher (PyQt) ----------------   def start_desktop_app():       class POSWindow(QMainWindow):           def init(self):               super().init()               self.setWindowTitle("نقطة بيع - سوبر ماركت")               self.showFullScreen()               central = QWidget()               self.setCentralWidget(central)               v = QVBoxLayout()               topbar = QHBoxLayout()               exit_btn = QPushButton("خروج")               exit_btn.setFixedHeight(40)               exit_btn.clicked.connect(self.close_application)               topbar.addStretch()               topbar.addWidget(exit_btn)               v.addLayout(topbar)               self.browser = QWebEngineView()               self.browser.setUrl(QUrl("http://127.0.0.1:5000/"))               v.addWidget(self.browser)               central.setLayout(v)           def close_application(self):               try:                   import requests                   requests.post("http://127.0.0.1:5000/shutdown", timeout=1)               except Exception:                   pass               QApplication.quit()       qt_app = QApplication(sys.argv)       win = POSWindow()       win.show()       qt_app.exec_()   # ---------------- Main runner ----------------   if name == 'main':       with app.app_context():           init_db()       def run_flask():           app.run(host='127.0.0.1', port=5000, debug=False, use_reloader=False)       t = threading.Thread(target=run_flask, daemon=True)       t.start()       try:           start_desktop_app()       except Exception as e:           print("خطأ في تشغيل الواجهة الرسومية:", e)           print("يمكنك تشغيل السيرفر يدوياً بفتح المتصفح على http://127.0.0.1:5000")  
